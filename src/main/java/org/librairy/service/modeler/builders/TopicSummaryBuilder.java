package org.librairy.service.modeler.builders;

import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DBSCANClusterer;
import org.apache.commons.math3.ml.distance.DistanceMeasure;
import org.librairy.metrics.data.TopicPoint;
import org.librairy.metrics.hash.DensityBasedHash;
import org.librairy.service.modeler.facade.model.TopicSummary;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.Charset;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * @author Badenes Olmedo, Carlos <cbadenes@fi.upm.es>
 */

public class TopicSummaryBuilder {

    private static final Logger LOG = LoggerFactory.getLogger(TopicSummaryBuilder.class);

    private final Map<Integer, List<String>> hash;


    public TopicSummaryBuilder(List<Double> topicDistribution) {

        DensityBasedHash hashAlgorithm = new DensityBasedHash();
        this.hash = hashAlgorithm.hash(topicDistribution);
    }

    public List<TopicSummary> getTopTopics(){
        LOG.info("hash: " + hash);
        return hash.entrySet().stream().filter(entry -> entry.getValue() != null).flatMap(entry -> entry.getValue().stream().map(t -> new TopicSummary(Integer.valueOf(t.replace("t","")),t,"level"+entry.getKey()))).collect(Collectors.toList());
    }

    public Map<Integer, List<String>> getHash() {
        return hash;
    }

    public static void main(String[] args) {

        //List<Double> vector = Arrays.asList

        List<Double> vector = Arrays.asList(0.01833976833976834,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.03185328185328185,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.01833976833976834,
                0.01833976833976834,
                0.004826254826254826,
                0.0250965250965251,
                0.004826254826254826,
                0.004826254826254826,
                0.0250965250965251,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.01833976833976834,
                0.011583011583011584,
                0.011583011583011584,
                0.01833976833976834,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.011583011583011584,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.01833976833976834,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.3764478764478765,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.011583011583011584,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826,
                0.004826254826254826);

        TopicSummaryBuilder topicSummary = new TopicSummaryBuilder(vector);
        LOG.info("Hash Expression: \n" + topicSummary.getHash());
        LOG.info("Topic Summary: \n" + topicSummary.getTopTopics());

    }

}
